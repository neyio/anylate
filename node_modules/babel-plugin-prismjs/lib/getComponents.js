"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _components = _interopRequireDefault(require("prismjs/components.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var getPath = function getPath(type) {
  return function (name) {
    return "prismjs/".concat(_components["default"][type].meta.path.replace(/\{id\}/g, name));
  };
};

var getName = function getName(type, name) {
  if (type !== 'languages') {
    return name;
  }

  if (typeof _components["default"][type][name] !== 'undefined') {
    return name;
  }

  for (var key in _components["default"].languages) {
    if (key === 'meta') {
      continue;
    }

    var alias = _components["default"].languages[key].alias;

    if (typeof alias === 'string' && alias === name) {
      return key;
    }

    if (Array.isArray(alias) && alias.includes(name)) {
      return key;
    }
  }

  throw new Error("Language ".concat(name, " is invalid. Is this a typo?"));
};

var getRequire = function getRequire(type, name) {
  return _components["default"][type][name].require;
};

var getPeers = function getPeers(type, name) {
  return _components["default"][type][name].peerDependencies;
};

var getNoCSS = function getNoCSS(type, name) {
  return _components["default"][type][name].noCSS;
};

var makeArray = function makeArray(element) {
  return (// eslint-disable-next-line eqeqeq
    element != null && !Array.isArray(element) ? [element] : element
  );
};

var getAllDeps = function getAllDeps(type, name) {
  var requires = makeArray(getRequire(type, name));
  var peers = makeArray(getPeers(type, name));

  if (requires && peers) {
    return [].concat(_toConsumableArray(requires), _toConsumableArray(peers));
  }

  if (requires) {
    return requires;
  }

  if (peers) {
    return peers;
  }

  return [];
};

var getTheme = function getTheme(theme) {
  if (theme === 'default') {
    theme = 'prism';
  } else {
    theme = "prism-".concat(theme);
  }

  return getPath('themes')(theme);
};

var getDependencies = function getDependencies(type) {
  return function getDependencies(deps, newDeps) {
    if (!newDeps) {
      return deps;
    }

    deps = makeArray(newDeps).reduce(function (deps, dep) {
      dep = getName(type, dep);
      deps = getDependencies(deps, getRequire(type, dep));

      if (!deps.includes(dep)) {
        deps.push(dep);
      }

      return deps;
    }, deps);

    if (type === 'languages') {
      deps.sort(function (b, a) {
        var aPeers = getAllDeps(type, a);
        var bPeers = getAllDeps(type, b);

        if (aPeers && aPeers.includes(b)) {
          return -1;
        }

        if (bPeers && bPeers.includes(a)) {
          return 1;
        }

        return 0;
      });
    }

    return deps;
  };
};

var _default = function _default() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$languages = _ref.languages,
      languages = _ref$languages === void 0 ? [] : _ref$languages,
      _ref$plugins = _ref.plugins,
      plugins = _ref$plugins === void 0 ? [] : _ref$plugins,
      theme = _ref.theme,
      _ref$css = _ref.css,
      css = _ref$css === void 0 ? false : _ref$css;

  return [].concat(_toConsumableArray(languages.reduce(getDependencies('languages'), []).map(getPath('languages'))), _toConsumableArray(plugins.reduce(getDependencies('plugins'), []).reduce(function (deps, dep) {
    var add = [getPath('plugins')(dep)];

    if (css && !getNoCSS('plugins', dep)) {
      add.unshift(getPath('plugins')(dep) + '.css');
    }

    return [].concat(_toConsumableArray(deps), add);
  }, [])), _toConsumableArray(css && theme ? [getTheme(theme)] : []));
};

exports["default"] = _default;